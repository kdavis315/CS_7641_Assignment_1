theme_bw()
wine_train_split <- sample(1:nrow(wine_train_set), 1800)
wine_training_set <- wine_train_set[wine_train_split,]
wine_val_set <- wine_train_set[-wine_train_split,]
HighQuality2 <- ifelse(wine_training_set$HighQuality == "No", 0, 1)
wine_training_set <- data.frame(wine_training_set, HighQuality2)
wine_training_set$HighQuality <- NULL
HighQuality3 <- ifelse(wine_val_set$HighQuality == "No", 0, 1)
wine_val_set <- data.frame(wine_val_set, HighQuality3)
wine_val_set$HighQuality <- NULL
wine_tree <- rpartScore::rpartScore(HighQuality2~., wine_training_set, split="abs", prune="mr")
par(mar=c(.5,.5,.5,.5))
plot(wine_tree)
text(wine_tree)
wine_tree_pruned <- rpart::prune(wine_tree, cp=0.01306363)
plot(wine_tree_pruned)
text(wine_tree_pruned)
tree.fitted <- fitted.values(wine_tree_pruned)
with(wine_training_set, table(tree.fitted, HighQuality2))
tree.fitted
tree.fitted <- predict(wine_tree_pruned, wine_training_set)
with(wine_training_set, table(tree.fitted, HighQuality2))
confusionMatrix(tree.fitted, wine_training_set$HighQuality2)
confusionMatrix(wine_training_set$HighQuality2, tree.fitted)
tree.fitted <- predict(wine_tree_pruned, wine_training_set)
confusionMatrix(wine_training_set$HighQuality2, tree.fitted)
tree.pred <- predict(wine_tree_pruned, wine_val_set)
confusionMatrix(wine_val_set$HighQuality3, tree.pred)
HighQuality4 <- ifelse(wine_test_set$HighQuality == "No", 0, 1)
wine_test_set <- data.frame(wine_test_set, HighQuality4)
wine_test_set$HighQuality <- NULL
tree.pred <- predict(wine_tree_pruned, wine_test_set)
with(wine_test_set, table(tree.pred, HighQuality4))
confusionMatrix(wine_test_set$HighQuality4, tree.pred)
set.seed(8)
bank_test_split <- createDataPartition(bank$y, p=.75, list=FALSE, times=1)
bank_test_set <- bank[-bank_test_split,]
bank_train_set <- bank[bank_test_split,]
bankkcv_control <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
banktreefit <- train(y~., data = bank_train_set, method = "rpartScore", trControl=bankkcv_control)
banktreefit <- caret::train(y~., data = bank_train_set, method = "rpartScore", trControl=bankkcv_control)
banktreefit
varImp(banktreefit)
banktreegrid <- expand.grid(cp=0.01790281, split="abs", prune="mr")
banklearning_curve_data <- learing_curve_dat(dat=bank_train_set, outcome = "y", test_prop = .25, method="rpartScore", metric="Accuracy", trControl=bankkcv_control, tuneGrid=banktreegrid)
banknew_learning_curve <- banklearning_curve_data[banklearning_curve_data$Data!="Resampling",]
ggplot(banknew_learning_curve, aes(x=Training_Size, y=Accuracy, color=Data))+
geom_smooth(method=loess, span=.8)+
theme_bw()
bank_train_split <- createDataPartition(bank_train_set$y, p=.56, list=FALSE, times=1)
bank_training_set <- bank_train_set[-bank_train_split,]
bank_val_set <- bank_train_set[bank_train_split,]
y2 <- ifelse(bank_training_set$y == "no", 0, 1)
bank_training_set <- data.frame(bank_training_set, y2)
bank_training_set$y <- NULL
y3 <- ifelse(bank_val_set$y == "no", 0, 1)
bank_val_set <- data.frame(bank_val_set, y3)
bank_val_set$y <- NULL
bank_tree <- rpartScore::rpartScore(y2~., bank_training_set, split="abs", prune="mr")
par(mar=c(.5,.5,.5,.5))
plot(bank_tree)
text(bank_tree)
bank_tree_pruned <- rpart::prune(bank_tree, cp=0.01790281)
plot(bank_tree_pruned)
text(bank_tree_pruned)
tree.fitted <- predict(bank_tree_pruned, bank_training_set)
confusionMatrix(bank_training_set$y2, tree.fitted)
tree.pred <- predict(bank_tree_pruned, bank_val_set)
confusionMatrix(bank_val_set$y3, tree.pred)
y4 <- ifelse(bank_test_set$y == "no", 0, 1)
bank_test_set <- data.frame(bank_test_set, y4)
bank_test_set$y <- NULL
tree.pred <- predict(bank_tree_pruned, bank_test_set)
confusionMatrix(bank_test_set$y4, tree.pred)
treegrid2 <- expand.grid(cp=c(0.01,0.03,0.05), split=c("abs", "quad"), prune=c("mr", "mc"))
treefit2 <- caret::train(HighQuality~., data = wine_training_set, method = "rpartScore", trControl=kcv_control, tuneGrid=treegrid2)
require(caret)
require(RSNNS)
wine <- read.csv("winequality-white.csv")
bank <- read.csv("bank.csv")
HighQuality <- ifelse(wine$quality <= 6, "No", "Yes")
winedf <- data.frame(wine, HighQuality)
winedf$quality <- NULL
set.seed(8)
wine_test_split <- sample(1:nrow(winedf), 1200)
wine_test_set <- winedf[wine_test_split,]
wine_train_set <- winedf[-wine_test_split,]
x <- wine_train_set[,1:11]
y <- wine_train_set[,12]
kcv_control <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
nnfit1 <- caret::train(x, y, method = "mlp", trControl=kcv_control)
nnfit1
varImp(nnfit1)
nngrid <- expand.grid(size=1)
learning_curve_data <- caret::learing_curve_dat(wine_train_set, outcome = "HighQuality", test_prop = .25, method="mlp", metric="Accuracy", trControl=kcv_control, tuneGrid=nngrid)
new_learning_curve <- learning_curve_data[learning_curve_data$Data!="Resampling",]
ggplot(new_learning_curve, aes(x=Training_Size, y=Accuracy, color=Data))+
geom_smooth(method=loess, span=.8)+
theme_bw()
wine_train_split <- sample(1:nrow(wine_train_set), 2000)
wine_train <- wine_train_set[wine_train_split,]
wine_val <- wine_train_set[-wine_train_split,]
wine_train_and_val <-  both.dfs <- rbind(wine_train, wine_val)
wine_test <-  both.dfs <- rbind(wine_train, wine_test_set)
wine_tv_values <- wine_train_and_val[,1:11]
wine_tv_targets <- decodeClassLabels(wine_train_and_val[,12])
wine_test_values <- wine_test[,1:11]
wine_test_targets <- decodeClassLabels(wine_test[,12])
wine_train_and_val <- splitForTrainingAndTest(wine_tv_values, wine_tv_targets, ratio = 0.46)
wine_train_and_val <- normTrainingAndTestSet(wine_train_and_val)
wine_test <- splitForTrainingAndTest(wine_test_values, wine_test_targets, ratio = 0.375)
wine_test <- normTrainingAndTestSet(wine_test)
wine_nn <- mlp(wine_train_and_val$inputsTrain, wine_train_and_val$targetsTrain, size=1, inputsTest = wine_train_and_val$inputsTest, targetsTest = wine_train_and_val$targetsTest)
nn.fitted <- predict(wine_nn, wine_train_and_val$inputsTrain)
pred1 <- ifelse(nn.pred[,1] >= nn.pred[,2], "No", "Yes")
pred1 <- ifelse(nn.pred[,1] >= nn.fitted[,2], "No", "Yes")
pred1 <- ifelse(nn.fitted[,1] >= nn.fitted[,2], "No", "Yes")
predictions <- decodeClassLabels(pred1)
pred <- encodeClassLabels(predictions)
targetsTrain <- encodeClassLabels(wine_train_and_val$targetsTrain)
confusionMatrix(TargetsTrain, nn.fitted)
confusionMatrix(targetsTrain, nn.fitted)
nn.pred <- predict(wine_nn, wine_train_and_val$inputsTest)
pred1 <- ifelse(nn.pred[,1] >= nn.pred[,2], "No", "Yes")
predictions <- decodeClassLabels(pred1)
pred <- encodeClassLabels(predictions)
targetsTest <- encodeClassLabels(wine_train_and_val$targetsTest)
confusionMatrix(targetsTest, pred)
nn.pred <- predict(wine_nn, wine_test$inputsTest)
pred1 <- ifelse(nn.pred[,1] >= nn.pred[,2], "No", "Yes")
predictions <- decodeClassLabels(pred1)
pred <- encodeClassLabels(predictions)
targetsTest <- encodeClassLabels(wine_test$targetsTest)
confusionMatrix(targetsTest, pred)
bank$job <- gsub("-", "", bank$job)
dummies <- dummyVars(y ~ ., data = bank)
newbank <- predict(dummies, newdata = bank)
bankdata <- data.frame(newbank, bank$y)
set.seed(8)
bank_test_split <- createDataPartition(bank$y, p=.75, list=FALSE, times=1)
bank_test_set <- bankdata[-bank_test_split,]
bank_train_set <- bankdata[bank_test_split,]
x <- bank_train_set[,1:51]
y <- bank_train_set[,52]
bankkcv_control <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
banknnfit <- caret::train(x, y, method = "mlp", trControl=bankkcv_control)
banknnfit
varImp(banknnfit)
banknngrid <- expand.grid(size=1)
banklearning_curve_data <- caret::learing_curve_dat(dat=bank_train_set, outcome = "bank.y", test_prop = .25, method="mlp", metric="Accuracy", trControl=bankkcv_control, tuneGrid=banknngrid)
banknew_learning_curve <- banklearning_curve_data[banklearning_curve_data$Data!="Resampling",]
ggplot(banknew_learning_curve, aes(x=Training_Size, y=Accuracy, color=Data))+
geom_smooth(method=loess, span=.8)+
theme_bw()
bank_train_split <- createDataPartition(bank_train_set$bank.y, p=.44, list=FALSE, times=1)
bank_train <- bank_train_set[bank_train_split,]
bank_val <- bank_train_set[-bank_train_split,]
bank_train_and_val <-  both.dfs <- rbind(bank_train, bank_val)
bank_test <-  both.dfs <- rbind(bank_train, bank_test_set)
bank_tv_values <- bank_train_and_val[,1:51]
bank_tv_targets <- decodeClassLabels(bank_train_and_val[,52])
bank_test_values <- bank_test[,1:51]
bank_test_targets <- decodeClassLabels(bank_test[,52])
bank_train_and_val <- splitForTrainingAndTest(bank_tv_values, bank_tv_targets, ratio = 0.56)
bank_train_and_val <- normTrainingAndTestSet(bank_train_and_val)
bank_test <- splitForTrainingAndTest(bank_test_values, bank_test_targets, ratio = 0.43)
bank_test <- normTrainingAndTestSet(bank_test)
bank_nn <- mlp(bank_train_and_val$inputsTrain, bank_train_and_val$targetsTrain, size=1, inputsTest = bank_train_and_val$inputsTest, targetsTest = bank_train_and_val$targetsTest)
nn.fitted <- predict(bank_nn, bank_train_and_val$inputsTrain)
pred1 <- ifelse(nn.fitted[,1] >= nn.fitted[,2], "No", "Yes")
predictions <- decodeClassLabels(pred1)
pred <- encodeClassLabels(predictions)
targetsTrain <- encodeClassLabels(bank_train_and_val$targetsTrain)
confusionMatrix(targetsTrain, nn.fitted)
nn.pred <- predict(bank_nn, bank_train_and_val$inputsTest)
pred1 <- ifelse(nn.pred[,1] >= nn.pred[,2], "No", "Yes")
predictions <- decodeClassLabels(pred1)
pred <- encodeClassLabels(predictions)
targetsTest <- encodeClassLabels(bank_train_and_val$targetsTest)
table(targetsTest, pred)
nn.pred <- predict(bank_nn, bank_test$inputsTest)
pred1 <- ifelse(nn.pred[,1] >= nn.pred[,2], "No", "Yes")
predictions <- decodeClassLabels(pred1)
pred <- encodeClassLabels(predictions)
targetsTest <- encodeClassLabels(bank_test$targetsTest)
table(targetsTest, pred)
require(caret)
require(ada)
require(plyr)
wine <- read.csv("winequality-white.csv")
bank <- read.csv("bank.csv")
hist(wine$quality)
HighQuality <- ifelse(wine$quality <= 6, "No", "Yes")
winedf <- data.frame(wine, HighQuality)
winedf$quality <- NULL
set.seed(8)
wine_test_split <- sample(1:nrow(winedf), 1200)
wine_test_set <- winedf[wine_test_split,]
wine_train_set <- winedf[-wine_test_split,]
kcv_control <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
treefit1 <- caret::train(HighQuality~., data = wine_train_set, method = "ada", trControl=kcv_control)
treefit1
varImp(treefit1)
treegrid <- expand.grid(iter = 150, maxdepth = 3, nu =.1)
learning_curve_data <- learing_curve_dat(dat=wine_train_set, outcome = "HighQuality", test_prop = .25, method="ada", metric="Accuracy", trControl=kcv_control, tuneGrid=treegrid)
new_learning_curve <- learning_curve_data[learning_curve_data$Data!="Resampling",]
ggplot(new_learning_curve, aes(x=Training_Size, y=Accuracy, color=Data))+
geom_smooth(method=loess, span=.8)+
theme_bw()
wine_train_split <- sample(1:nrow(wine_train_set), 2000)
wine_training_set <- wine_train_set[wine_train_split,]
wine_val_set <- wine_train_set[-wine_train_split,]
HighQuality2 <- ifelse(wine_training_set$HighQuality == "No", 0, 1)
wine_training_set <- data.frame(wine_training_set, HighQuality2)
wine_training_set$HighQuality <- NULL
HighQuality3 <- ifelse(wine_val_set$HighQuality == "No", 0, 1)
wine_val_set <- data.frame(wine_val_set, HighQuality3)
wine_val_set$HighQuality <- NULL
HighQuality4 <- ifelse(wine_test_set$HighQuality == "No", 0, 1)
wine_test_set <- data.frame(wine_test_set, HighQuality4)
wine_test_set$HighQuality <- NULL
wine_tree <- ada(HighQuality2~., wine_training_set, iter = 150, nu =.1, type="discrete")
tree.fitted <- predict(wine_tree, wine_training_set)
confusionMatrix(wine_training_set$HighQuality2, tree.fitted)
tree.pred <- predict(wine_tree, wine_val_set)
confusionMatrix(wine_val_set$HighQuality3, tree.pred)
wine_tree.pred <- predict(wine_tree, wine_test_set)
confusionMatrix(wine_test_set$HighQuality4, wine_tree.pred)
bank$job <- gsub("-", "", bank$job)
dummies <- dummyVars(y ~ ., data = bank)
newbank <- predict(dummies, newdata = bank)
bankdata <- data.frame(newbank, bank$y)
set.seed(8)
bank_test_split <- createDataPartition(bankdata$bank.y, p=.75, list=FALSE, times=1)
bank_test_set <- bankdata[-bank_test_split,]
bank_train_set <- bankdata[bank_test_split,]
bankkcv_control <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
banktreefit <- caret::train(bank.y~., data = bank_train_set, method = "ada", trControl=bankkcv_control)
banktreefit
banktreegrid <- expand.grid(iter = 150, maxdepth = 2, nu =.1)
banklearning_curve_data <- learing_curve_dat(dat=bank_train_set, outcome = "bank.y", test_prop = .25, method="ada", metric="Accuracy", trControl=bankkcv_control, tuneGrid=banktreegrid)
banknew_learning_curve <- banklearning_curve_data[banklearning_curve_data$Data!="Resampling",]
ggplot(banknew_learning_curve, aes(x=Training_Size, y=Accuracy, color=Data))+
geom_smooth(method=loess, span=.8)+
theme_bw()
bank_train_split <- createDataPartition(bank_train_set$bank.y, p=.56, list=FALSE, times=1)
bank_training_set <- bank_train_set[-bank_train_split,]
bank_val_set <- bank_train_set[bank_train_split,]
y2 <- ifelse(bank_training_set$bank.y == "no", 0, 1)
bank_training_set <- data.frame(bank_training_set, y2)
bank_training_set$bank.y <- NULL
y3 <- ifelse(bank_val_set$bank.y == "no", 0, 1)
bank_val_set <- data.frame(bank_val_set, y3)
bank_val_set$bank.y <- NULL
y4 <- ifelse(bank_test_set$bank.y == "no", 0, 1)
bank_test_set <- data.frame(bank_test_set, y4)
bank_test_set$bank.y <- NULL
bank_tree <- ada(y2~., bank_training_set, iter = 100, nu =.1, type="discrete")
tree.fitted <- predict(bank_tree, bank_training_set)
confusionMatrix(bank_training_set$y2, tree.fitted)
tree.pred <- predict(bank_tree, bank_val_set)
confusionMatrix(bank_val_set$y3, tree.pred)
tree.pred <- predict(bank_tree, bank_test_set)
confusionMatrix(bank_test_set$y4, tree.pred)
require(caret)
require(kernlab)
wine <- read.csv("winequality-white.csv")
bank <- read.csv("bank.csv")
hist(wine$quality)
HighQuality <- ifelse(wine$quality <= 6, "No", "Yes")
winedf <- data.frame(wine, HighQuality)
winedf$quality <- NULL
set.seed(8)
wine_test_split <- sample(1:nrow(winedf), 1200)
wine_test_set <- winedf[wine_test_split,]
wine_train_set <- winedf[-wine_test_split,]
kcv_control <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
wine_svmLinear1 <- caret::train(HighQuality~., data = wine_train_set, method = "svmLinear", trControl=kcv_control)
wine_svmLinear1
varImp(wine_svmLinear1)
wine_svmPoly1 <- caret::train(HighQuality~., data = wine_train_set, method = "svmPoly", trControl=kcv_control)
wine_svmPoly1
varImp(wine_svmPoly1)
wine_svmRB1 <- caret::train(HighQuality~., data = wine_train_set, method = "svmRadial", trControl=kcv_control)
wine_svmRB1
varImp(wine_svmRB1)
wine_paramgrid_linear <- expand.grid(C=1)
linear_lc_data <- learing_curve_dat(dat=wine_train_set, outcome = "HighQuality", test_prop = .25, method="svmLinear", metric="Accuracy", trControl=kcv_control, tuneGrid=wine_paramgrid_linear)
linear_lc <- linear_lc_data[linear_lc_data$Data!="Resampling",]
ggplot(linear_lc, aes(x=Training_Size, y=Accuracy, color=Data))+
geom_smooth(method=loess, span=.8)+
theme_bw()
wine_paramgrid_poly <- expand.grid(degree=3, scale=.1, C=.5)
poly_lc_data <- learing_curve_dat(dat=wine_train_set, outcome = "HighQuality", test_prop = .25, method="svmPoly", metric="Accuracy", trControl=kcv_control, tuneGrid=wine_paramgrid_poly)
poly_lc <- poly_lc_data[poly_lc_data$Data!="Resampling",]
ggplot(poly_lc, aes(x=Training_Size, y=Accuracy, color=Data))+
geom_smooth(method=loess, span=.8)+
theme_bw()
wine_paramgrid_RB <- expand.grid(sigma= .07990059, C=1)
RB_lc_data <- learing_curve_dat(dat=wine_train_set, outcome = "HighQuality", test_prop = .25, method="svmRadial", metric="Accuracy", trControl=kcv_control, tuneGrid=wine_paramgrid_RB)
RB_lc <- RB_lc_data[RB_lc_data$Data!="Resampling",]
ggplot(RB_lc, aes(x=Training_Size, y=Accuracy, color=Data))+
geom_smooth(method=loess, span=.8)+
theme_bw()
linear_train_split <- sample(1:nrow(wine_train_set), 1600)
linear_training_set <- wine_train_set[linear_train_split,]
linear_val_set <- wine_train_set[-linear_train_split,]
poly_train_split <- sample(1:nrow(wine_train_set), 1900)
poly_training_set <- wine_train_set[poly_train_split,]
poly_val_set <- wine_train_set[-poly_train_split,]
RB_train_split <- sample(1:nrow(wine_train_set), 2000)
RB_training_set <- wine_train_set[RB_train_split,]
RB_val_set <- wine_train_set[-RB_train_split,]
wine_svmLinear <- ksvm(HighQuality~., linear_training_set, C=1, kernel="vanilladot")
wine_svmPoly <- ksvm(HighQuality~., poly_training_set, degree=3, scale=.1, C=.5, kernel="polydot")
wine_svmRB <- ksvm(HighQuality~., RB_training_set, sigma= .07990059, C=1, kernel="rbfdot")
svmLinear.fitted <- predict(wine_svmLinear, linear_training_set)
confusionMatrix(linear_training_set$HighQuality2, svmLinear.fitted)
svmLinear.fitted
linear_training_set$HighQuality2
head(linear_training_set)
svmLinear.fitted <- predict(wine_svmLinear, linear_training_set)
confusionMatrix(linear_training_set$HighQuality, svmLinear.fitted)
svmLinear.pred <- predict(wine_svmLinear, linear_val_set)
confusionMatrix(linear_val_set$HighQuality, svmLinear.pred)
svmLinear.fitted <- predict(wine_svmLinear, linear_training_set)
confusionMatrix(linear_training_set$HighQuality, svmLinear.fitted)
svmLinear.pred <- predict(wine_svmLinear, linear_val_set)
confusionMatrix(linear_val_set$HighQuality, svmLinear.pred)
svmLinear.pred <- predict(wine_svmLinear, wine_test_set)
confusionMatrix(linear_test_set$HighQuality, svmLinear.pred)
confusionMatrix(wine_test_set$HighQuality, svmLinear.pred)
svmPoly.fitted <- predict(wine_svmPoly, poly_training_set)
confusionMatrix(poly_training_set$HighQuality, svmPoly.fitted)
svmPoly.pred <- predict(wine_svmPoly, poly_val_set)
confusionMatrix(poly_val_set$HighQuality, svmPoly.pred)
svmPoly.pred <- predict(wine_svmPoly, wine_test_set)
confusionMatrix(wine_test_set$HighQuality, svmPoly.pred)
svmRB.fitted <- predict(wine_svmRB, RB_training_set)
confusionMatrix(RB_training_set$HighQuality, svmRB.fitted)
svmRB.pred <- predict(wine_svmRB, RB_val_set)
confusionMatrix(RB_val_set$HighQuality, svmRB.pred)
svmRB.pred <- predict(wine_svmRB, wine_test_set)
confusionMatrix(wine_test_set$HighQuality, svmRB.pred)
bank$job <- gsub("-", "", bank$job)
dummies <- dummyVars(y ~ ., data = bank)
newbank <- predict(dummies, newdata = bank)
bankdata <- data.frame(newbank, bank$y)
set.seed(8)
bank_test_split <- createDataPartition(bankdata$bank.y, p=.75, list=FALSE, times=1)
bank_test_set <- bankdata[-bank_test_split,]
bank_train_set <- bankdata[bank_test_split,]
kcv_control <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
bank_svmLinear1 <- caret::train(bank.y~., data = bank_train_set, method = "svmLinear", trControl=kcv_control)
bank_svmLinear1
bank_svmPoly1 <- caret::train(bank.y~., data = bank_train_set, method = "svmPoly", trControl=kcv_control)
bank_svmPoly1
bank_svmRB1 <- caret::train(bank.y~., data = bank_train_set, method = "svmRadial", trControl=kcv_control)
bank_svmRB1 <- caret::train(bank.y~., data = bank_train_set, method = "svmRadial", trControl=kcv_control)
bank_svmRB1
bank_paramgrid_linear <- expand.grid(C=1)
linear_lc_data <- learing_curve_dat(dat=bank_train_set, outcome = "bank.y", test_prop = .25, method="svmLinear", metric="Accuracy", trControl=kcv_control, tuneGrid=bank_paramgrid_linear)
linear_lc <- linear_lc_data[linear_lc_data$Data!="Resampling",]
ggplot(linear_lc, aes(x=Training_Size, y=Accuracy, color=Data))+
geom_smooth(method=loess, span=.8)+
theme_bw()
bank_paramgrid_poly <- expand.grid(degree=1, scale=.1, C=.1)
poly_lc_data <- learing_curve_dat(dat=bank_train_set, outcome = "bank.y", test_prop = .25, method="svmPoly", metric="Accuracy", trControl=kcv_control, tuneGrid=bank_paramgrid_poly)
poly_lc <- poly_lc_data[poly_lc_data$Data!="Resampling",]
ggplot(poly_lc, aes(x=Training_Size, y=Accuracy, color=Data))+
geom_smooth(method=loess, span=.8)+
theme_bw()
bank_paramgrid_RB <- expand.grid(sigma= .0134604, C=1)
RB_lc_data <- learing_curve_dat(dat=bank_train_set, outcome = "bank.y", test_prop = .25, method="svmRadial", metric="Accuracy", trControl=kcv_control, tuneGrid=bank_paramgrid_RB)
RB_lc <- RB_lc_data[RB_lc_data$Data!="Resampling",]
ggplot(RB_lc, aes(x=Training_Size, y=Accuracy, color=Data))+
geom_smooth(method=loess, span=.8)+
theme_bw()
linear_train_split <- sample(1:nrow(bank_train_set), 1500)
linear_training_set <- bank_train_set[linear_train_split,]
linear_val_set <- bank_train_set[-linear_train_split,]
poly_train_split <- sample(1:nrow(bank_train_set), 2000)
poly_training_set <- bank_train_set[poly_train_split,]
poly_val_set <- bank_train_set[-poly_train_split,]
RB_train_split <- sample(1:nrow(bank_train_set), 1700)
RB_training_set <- bank_train_set[RB_train_split,]
RB_val_set <- bank_train_set[-RB_train_split,]
bank_svmLinear <- ksvm(bank.y~., linear_training_set, C=1, kernel="vanilladot")
bank_svmPoly <- ksvm(bank.y~., poly_training_set, degree=1, scale=.1, C=.1, kernel="polydot")
bank_svmRB <- ksvm(bank.y~., RB_training_set, sigma= .01317368, C=1, kernel="rbfdot")
svmLinear.fitted <- predict(bank_svmLinear, linear_training_set)
confusionMatrix(linear_training_set$bank.y, svmLinear.fitted)
svmLinear.pred <- predict(bank_svmLinear, linear_val_set)
confusionMatrix(linear_val_set$bank.y, svmLinear.pred)
svmLinear.pred <- predict(bank_svmLinear, bank_test_set)
confusionMatrix(bank_test_set$bank.y, svmLinear.pred)
svmPoly.fitted <- predict(bank_svmPoly, poly_training_set)
confusionMatrix(poly_training_set$bank.y, svmPoly.fitted)
svmPoly.pred <- predict(bank_svmPoly, poly_val_set)
confusionMatrix(poly_val_set$bank.y, svmPoly.pred)
svmPoly.pred <- predict(bank_svmPoly, bank_test_set)
confusionMatrix(bank_test_set$bank.y, svmPoly.pred)
svmRB.fitted <- predict(bank_svmRB, RB_training_set)
confusionMatrix(RB_training_set$bank.y, svmRB.fitted)
svmRB.pred <- predict(bank_svmRB, RB_val_set)
confusionMatrix(RB_val_set$bank.y, svmRB.pred)
svmRB.pred <- predict(bank_svmRB, bank_test_set)
confusionMatrix(bank_test_set$bank.y, svmRB.pred)
require(caret)
require(class)
require(DMwR)
wine <- read.csv("winequality-white.csv")
bank <- read.csv("bank.csv")
hist(wine$quality)
HighQuality <- ifelse(wine$quality <= 6, "No", "Yes")
winedf <- data.frame(wine, HighQuality)
winedf$quality <- NULL
set.seed(8)
wine_test_split <- sample(1:nrow(winedf), 1200)
wine_test_set <- winedf[wine_test_split,]
wine_train_set <- winedf[-wine_test_split,]
kcv_control <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
knnfit1 <- caret::train(HighQuality~., data = wine_train_set, method = "knn", trControl=kcv_control)
knnfit1
varImp(knnfit1)
knngrid <- expand.grid(k=7)
learning_curve_data <- learing_curve_dat(dat=wine_train_set, outcome = "HighQuality", test_prop = .25, method="knn", metric="Accuracy", trControl=kcv_control, tuneGrid=knngrid)
new_learning_curve <- learning_curve_data[learning_curve_data$Data!="Resampling",]
ggplot(new_learning_curve, aes(x=Training_Size, y=Accuracy, color=Data))+
geom_smooth(method=loess, span=.8)+
theme_bw()
wine_train_split <- sample(1:nrow(wine_train_set), 2000)
wine_training_set <- wine_train_set[wine_train_split,]
wine_val_set <- wine_train_set[-wine_train_split,]
wine_knn1 <- kNN(HighQuality~., wine_training_set, wine_val_set, k=5)
wine_knn2 <- kNN(HighQuality~., wine_training_set, wine_val_set, k=6)
wine_knn3 <- kNN(HighQuality~., wine_training_set, wine_val_set, k=7)
wine_knn4 <- kNN(HighQuality~., wine_training_set, wine_val_set, k=8)
wine_knn5 <- kNN(HighQuality~., wine_training_set, wine_val_set, k=9)
winetest_knn1 <- kNN(HighQuality~., wine_training_set, wine_test_set, k=5)
winetest_knn2 <- kNN(HighQuality~., wine_training_set, wine_test_set, k=6)
winetest_knn3 <- kNN(HighQuality~., wine_training_set, wine_test_set, k=7)
winetest_knn4 <- kNN(HighQuality~., wine_training_set, wine_test_set, k=8)
winetest_knn5 <- kNN(HighQuality~., wine_training_set, wine_test_set, k=9)
confusionMatrix(wine_knn1, wine_val_set$HighQuality)
confusionMatrix(wine_knn2, wine_val_set$HighQuality)
confusionMatrix(wine_knn3, wine_val_set$HighQuality)
confusionMatrix(wine_knn4, wine_val_set$HighQuality)
confusionMatrix(wine_knn5, wine_val_set$HighQuality)
confusionMatrix(winetest_knn1, wine_test_set$HighQuality)
confusionMatrix(winetest_knn2, wine_test_set$HighQuality)
confusionMatrix(winetest_knn3, wine_test_set$HighQuality)
confusionMatrix(winetest_knn4, wine_test_set$HighQuality)
confusionMatrix(winetest_knn3, wine_test_set$HighQuality)
bank$job <- gsub("-", "", bank$job)
dummies <- dummyVars(y ~ ., data = bank)
newbank <- predict(dummies, newdata = bank)
bankdata <- data.frame(newbank, bank$y)
set.seed(8)
bank_test_split <- createDataPartition(bankdata$bank.y, p=.75, list=FALSE, times=1)
bank_test_set <- bankdata[-bank_test_split,]
bank_train_set <- bankdata[bank_test_split,]
bankkcv_control <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
bankknnfit <- caret::train(bank.y~., data = bank_train_set, method = "knn", trControl=bankkcv_control)
bankknnfit
varImp(bankknnfit)
bankknngrid <- expand.grid(k=9)
banklearning_curve_data <- learing_curve_dat(dat=bank_train_set, outcome = "bank.y", test_prop = .25, method="knn", metric="Accuracy", trControl=bankkcv_control, tuneGrid=bankknngrid)
banknew_learning_curve <- banklearning_curve_data[banklearning_curve_data$Data!="Resampling",]
ggplot(banknew_learning_curve, aes(x=Training_Size, y=Accuracy, color=Data))+
geom_smooth(method=loess, span=.8)+
theme_bw()
bank_train_split <- createDataPartition(bank_train_set$bank.y, p=.53, list=FALSE, times=1)
bank_training_set <- bank_train_set[-bank_train_split,]
bank_val_set <- bank_train_set[bank_train_split,]
bank_knn1 <- kNN(bank.y~., bank_training_set, bank_val_set, k=7)
bank_knn2 <- kNN(bank.y~., bank_training_set, bank_val_set, k=8)
bank_knn3 <- kNN(bank.y~., bank_training_set, bank_val_set, k=9)
bank_knn4 <- kNN(bank.y~., bank_training_set, bank_val_set, k=10)
bank_knn5 <- kNN(bank.y~., bank_training_set, bank_val_set, k=11)
banktest_knn1 <- kNN(bank.y~., bank_training_set, bank_test_set, k=7)
banktest_knn2 <- kNN(bank.y~., bank_training_set, bank_test_set, k=8)
banktest_knn3 <- kNN(bank.y~., bank_training_set, bank_test_set, k=9)
banktest_knn4 <- kNN(bank.y~., bank_training_set, bank_test_set, k=10)
banktest_knn5 <- kNN(bank.y~., bank_training_set, bank_test_set, k=11)
confusionMatrix(bank_val_set$bank.y, bank_knn1)
confusionMatrix(bank_val_set$bank.y, bank_knn2)
confusionMatrix(bank_val_set$bank.y, bank_knn3)
confusionMatrix(bank_val_set$bank.y, bank_knn4)
confusionMatrix(bank_val_set$bank.y, bank_knn5)
confusionMatrix(bank_test_set$bank.y, banktest_knn1)
confusionMatrix(bank_test_set$bank.y, banktest_knn2)
confusionMatrix(bank_test_set$bank.y, banktest_knn3)
confusionMatrix(bank_test_set$bank.y, banktest_knn4)
confusionMatrix(bank_test_set$bank.y, banktest_knn5)
require(caret)
require(rpart)
require(rpartScore)
require(plyr)
require(e1071)
wine <- read.csv("winequality-white.csv")
bank <- read.csv("bank.csv")
bank[,17]
table(bank$y)
table(winedf$HighQuality)
hist(wine$quality)
HighQuality <- ifelse(wine$quality <= 6, "No", "Yes")
winedf <- data.frame(wine, HighQuality)
winedf$quality <- NULL
table(winedf$HighQuality)
table(bank$y)
wine$quality
